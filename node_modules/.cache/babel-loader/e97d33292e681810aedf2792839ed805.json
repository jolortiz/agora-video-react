{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/** ==== promisify client ==== */\n\nexports.promisifyClient = function (methodName, options) {\n  var target = options.target,\n      thisArg = options.thisArg,\n      argumentList = options.argumentList;\n\n  switch (methodName) {\n    default:\n      return Reflect.apply(target, thisArg, argumentList);\n\n    case 'init':\n      return new Promise(function (resolve, reject) {\n        Reflect.apply(target, thisArg, argumentList.slice(0, 1).concat([resolve, reject]));\n      });\n\n    case 'join':\n      return new Promise(function (resolve, reject) {\n        Reflect.apply(target, thisArg, argumentList.slice(0, 3).concat([resolve, reject]));\n      });\n\n    case 'leave':\n      return new Promise(function (resolve, reject) {\n        Reflect.apply(target, thisArg, [resolve, reject]);\n      });\n\n    case 'publish':\n      return new Promise(function (resolve, reject) {\n        setTimeout(resolve);\n        Reflect.apply(target, thisArg, argumentList.slice(0, 1).concat([reject]));\n      });\n\n    case 'subscribe':\n      return new Promise(function (resolve, reject) {\n        setTimeout(resolve);\n        Reflect.apply(target, thisArg, argumentList.slice(0, 2).concat([reject]));\n      });\n\n    case 'unpublish':\n      return new Promise(function (resolve, reject) {\n        setTimeout(resolve);\n        Reflect.apply(target, thisArg, argumentList.slice(0, 1).concat([reject]));\n      });\n\n    case 'unsubscribe':\n      return new Promise(function (resolve, reject) {\n        setTimeout(resolve);\n        Reflect.apply(target, thisArg, argumentList.slice(0, 1).concat([reject]));\n      });\n\n    case 'enableDualStream':\n      return new Promise(function (resolve, reject) {\n        Reflect.apply(target, thisArg, [resolve, reject]);\n      });\n\n    case 'getCameras':\n      return new Promise(function (resolve, reject) {\n        Reflect.apply(target, thisArg, [resolve, reject]);\n      });\n\n    case 'getLocalAudioStats':\n      return new Promise(function (resolve, reject) {\n        Reflect.apply(target, thisArg, [resolve, reject]);\n      });\n\n    case 'getLocalVideoStats':\n      return new Promise(function (resolve, reject) {\n        Reflect.apply(target, thisArg, [resolve, reject]);\n      });\n\n    case 'getNetworkStats':\n      return new Promise(function (resolve, reject) {\n        Reflect.apply(target, thisArg, [resolve, reject]);\n      });\n\n    case 'getPlayoutDevices':\n      return new Promise(function (resolve, reject) {\n        Reflect.apply(target, thisArg, [resolve, reject]);\n      });\n\n    case 'getRecordingDevices':\n      return new Promise(function (resolve, reject) {\n        Reflect.apply(target, thisArg, [resolve, reject]);\n      });\n\n    case 'getRemoteAudioStats':\n      return new Promise(function (resolve, reject) {\n        Reflect.apply(target, thisArg, [resolve, reject]);\n      });\n\n    case 'getRemoteVideoStats':\n      return new Promise(function (resolve, reject) {\n        Reflect.apply(target, thisArg, [resolve, reject]);\n      });\n\n    case 'getSystemStats':\n      return new Promise(function (resolve, reject) {\n        Reflect.apply(target, thisArg, [resolve, reject]);\n      });\n\n    case 'getTransportStats':\n      return new Promise(function (resolve, reject) {\n        Reflect.apply(target, thisArg, [resolve, reject]);\n      });\n  }\n};\n\nexports.promisifyStream = function (methodName, options) {\n  var target = options.target,\n      thisArg = options.thisArg,\n      argumentList = options.argumentList;\n\n  switch (methodName) {\n    default:\n      return Reflect.apply(target, thisArg, argumentList);\n\n    case 'init':\n      return new Promise(function (resolve, reject) {\n        Reflect.apply(target, thisArg, [resolve, reject]);\n      });\n\n    case 'getStats':\n      return new Promise(function (resolve, reject) {\n        Reflect.apply(target, thisArg, [resolve, reject]);\n      });\n  }\n};","map":null,"metadata":{},"sourceType":"script"}