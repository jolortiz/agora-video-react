{"ast":null,"code":"var _class, _temp;\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from \"react\";\nimport { SignalIcon } from \"./decorations\";\nimport { xor } from \"./utils\";\nimport AgoraIcon from \"./assets/agora.png\";\nimport SpeakerIcon from \"./assets/speaker.png\";\nimport \"./style.css\";\n\nvar _default = (_temp = _class = function (_Component) {\n  _inherits(_default, _Component);\n\n  function _default(props) {\n    _classCallCheck(this, _default);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.startNetworkDetector = function () {\n      _this.stopNetworkDetector();\n\n      _this._networkDetector = setInterval(function () {\n        var stream = _this.props.stream;\n        stream.getStats(function (e) {\n          if (stream.local) {\n            // if local stream, use accessDelay\n            var accessDelay = Number.parseInt(e.accessDelay, 10);\n\n            if (isNaN(accessDelay)) {\n              return;\n            }\n\n            if (accessDelay < 100) {\n              _this.setState({\n                networkStatus: 0\n              });\n            } else if (accessDelay < 200) {\n              _this.setState({\n                networkStatus: 1\n              });\n            } else {\n              _this.setState({\n                networkStatus: 2\n              });\n            }\n          } else {\n            // if remote stream, use endToEndDelay\n            var endToEndDelay = Number.parseInt(e.endToEndDelay, 10);\n\n            if (isNaN(endToEndDelay)) {\n              return;\n            }\n\n            if (endToEndDelay < 200) {\n              _this.setState({\n                networkStatus: 0\n              });\n            } else if (endToEndDelay < 400) {\n              _this.setState({\n                networkStatus: 1\n              });\n            } else {\n              _this.setState({\n                networkStatus: 2\n              });\n            }\n          }\n        });\n      }, 1500);\n    };\n\n    _this.stopNetworkDetector = function () {\n      if (_this._networkDetector) {\n        clearInterval(_this._networkDetector);\n      }\n    };\n\n    _this._getSnapshot = function () {\n      // init snapshot the first time we got it\n      var stream = _this.props.stream;\n      return {\n        id: stream.getId(),\n        hasVideo: stream.hasVideo() || stream.hasScreen(),\n        hasAudio: stream.hasAudio(),\n        videoOn: stream.isVideoOn(),\n        audioOn: stream.isAudioOn(),\n        playing: stream.isPlaying()\n      };\n    };\n\n    _this._handleStreamSideEffects = function () {\n      if (!_this.props.autoChange) {\n        return;\n      } // deal with side effect\n\n\n      var $prev = _this._snapshot;\n      var $stream = _this.props.stream; // check video\n\n      if (xor($prev.videoOn, _this.props.video)) {\n        if ($stream.hasVideo()) {\n          _this.props.video ? $stream.enableVideo() : $stream.disableVideo();\n        }\n      } // check audio\n\n\n      if (xor($prev.audioOn, _this.props.audio)) {\n        if ($stream.hasAudio()) {\n          _this.props.audio ? $stream.enableAudio() : $stream.disableAudio();\n        }\n      }\n    };\n\n    try {\n      _this._snapshot = _this._getSnapshot();\n    } catch (err) {\n      throw new Error('The stream you passed is invalid!');\n    }\n\n    _this.state = {\n      networkStatus: 0\n    };\n    return _this;\n  } // _audioDetector: IntervalID\n\n\n  _default.prototype.componentDidUpdate = function componentDidUpdate() {\n    this._handleStreamSideEffects(); // check detector\n\n\n    if (this.props.networkDetect) {\n      this.startNetworkDetector();\n    } else {\n      this.stopNetworkDetector();\n    }\n\n    this._snapshot = this._getSnapshot();\n  };\n\n  _default.prototype.componentDidMount = function componentDidMount() {\n    this._handleStreamSideEffects(); // check detector\n\n\n    if (this.props.networkDetect) {\n      this.startNetworkDetector();\n    } // play stream\n\n\n    var stream = this.props.stream;\n    stream.play(\"agora--player__\" + stream.getId());\n  };\n\n  _default.prototype.componentWillUnmount = function componentWillUnmount() {\n    // check detecor\n    this.stopNetworkDetector(); // stop stream\n\n    var stream = this.props.stream;\n\n    if (stream && stream.isPlaying()) {\n      stream.stop(); // stream.local && stream.close();\n    }\n  };\n\n  _default.prototype.render = function render() {\n    var className = \"agora-player__box \\n    \" + (this.props.fit === \"cover\" ? \"cover\" : \"contain\") + \" \\n    \" + (this.props.className || \"\") + \" \";\n    var id = \"agora--player__\" + this.props.stream.getId();\n    var _props = this.props,\n        onClick = _props.onClick,\n        onDoubleClick = _props.onDoubleClick,\n        style = _props.style;\n    return React.createElement(\"div\", {\n      onClick: onClick,\n      onDoubleClick: onDoubleClick,\n      style: style,\n      className: className,\n      id: id\n    }, (!this.props.video || !(this._snapshot && this._snapshot.hasVideo)) && React.createElement(\"div\", {\n      className: \"agora-player__placeholder\"\n    }, React.createElement(\"img\", {\n      style: {\n        maxWidth: \"80%\"\n      },\n      src: AgoraIcon,\n      alt: \"placeholder for video\"\n    })), React.createElement(\"div\", {\n      className: \"agora-player__decorations\"\n    }, this.props.prependIcon, this.props.networkDetect && React.createElement(SignalIcon, {\n      level: this.state.networkStatus\n    }), this.props.speaking && React.createElement(\"div\", {\n      className: \"agora-player__icon\"\n    }, React.createElement(\"img\", {\n      title: \"Is speaking\",\n      src: SpeakerIcon,\n      alt: \"speaking\"\n    })), this.props.appendIcon), this.props.label && React.createElement(\"div\", {\n      className: \"agora-player__label\"\n    }, this.props.label));\n  };\n\n  return _default;\n}(Component), _class.defaultProps = {\n  stream: undefined,\n  video: true,\n  audio: true,\n  fit: \"cover\",\n  placeholder: {},\n  networkDetect: false,\n  speaking: false,\n  // audioDetect: false,\n  autoChange: true,\n  key: undefined,\n  className: \"\",\n  style: {}\n}, _temp);\n\nexport { _default as default };","map":null,"metadata":{},"sourceType":"module"}