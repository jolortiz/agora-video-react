{"ast":null,"code":"import _slicedToArray from \"/Users/jonathanortiz/AgoraIO/Basic-Video-Call/One-to-One-Video/Agora-Web-Tutorial-1to1-React/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport AgoraRTC from '../utils/AgoraEnhancer';\nconst fakeClient = AgoraRTC.createClient({\n  mode: 'live',\n  codec: 'vp8'\n});\n\nconst noop = () => {};\n\nconst useCamera = (client = fakeClient) => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        cameraList = _useState2[0],\n        setCameraList = _useState2[1];\n\n  useEffect(() => {\n    let mounted = true;\n\n    const onChange = () => {\n      if (!client) {\n        return;\n      }\n\n      client.getCameras().then(cameras => {\n        if (mounted) {\n          setCameraList(cameras);\n        }\n      }).catch(noop);\n    };\n\n    client && client.on('camera-changed', onChange);\n    onChange();\n    return () => {\n      mounted = false;\n      client && client.gatewayClient.removeEventListener('cameraChanged', onChange);\n    };\n  }, [client]);\n  return cameraList;\n};\n\nexport default useCamera;","map":{"version":3,"sources":["/Users/jonathanortiz/AgoraIO/Basic-Video-Call/One-to-One-Video/Agora-Web-Tutorial-1to1-React/src/hooks/useCamera.ts"],"names":["useState","useEffect","AgoraRTC","fakeClient","createClient","mode","codec","noop","useCamera","client","cameraList","setCameraList","mounted","onChange","getCameras","then","cameras","catch","on","gatewayClient","removeEventListener"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AAGA,MAAMC,UAAU,GAAGD,QAAQ,CAACE,YAAT,CAAsB;AACvCC,EAAAA,IAAI,EAAE,MADiC;AAEvCC,EAAAA,KAAK,EAAE;AAFgC,CAAtB,CAAnB;;AAKA,MAAMC,IAAI,GAAG,MAAM,CAAE,CAArB;;AAOA,MAAMC,SAAS,GAAG,CAACC,MAAM,GAAGN,UAAV,KAA4C;AAAA,oBACxBH,QAAQ,CAAoB,EAApB,CADgB;AAAA;AAAA,QACrDU,UADqD;AAAA,QACzCC,aADyC;;AAG5DV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,OAAO,GAAG,IAAd;;AAEA,UAAMC,QAAQ,GAAG,MAAM;AACrB,UAAI,CAACJ,MAAL,EAAa;AACX;AACD;;AACDA,MAAAA,MAAM,CACHK,UADH,GAEGC,IAFH,CAESC,OAAD,IAAgC;AACpC,YAAIJ,OAAJ,EAAa;AACXD,UAAAA,aAAa,CAACK,OAAD,CAAb;AACD;AACF,OANH,EAOGC,KAPH,CAOSV,IAPT;AAQD,KAZD;;AAcAE,IAAAA,MAAM,IAAIA,MAAM,CAACS,EAAP,CAAU,gBAAV,EAA4BL,QAA5B,CAAV;AAEAA,IAAAA,QAAQ;AAER,WAAO,MAAM;AACXD,MAAAA,OAAO,GAAG,KAAV;AACAH,MAAAA,MAAM,IAAKA,MAAD,CAAsDU,aAAtD,CAAoEC,mBAApE,CAAwF,eAAxF,EAAyGP,QAAzG,CAAV;AACD,KAHD;AAID,GAzBQ,EAyBN,CAACJ,MAAD,CAzBM,CAAT;AA2BA,SAAOC,UAAP;AACD,CA/BD;;AAiCA,eAAeF,SAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport AgoraRTC from '../utils/AgoraEnhancer';\nimport { IClientWithPromise } from 'agoran-awe/types/promisify';\n\nconst fakeClient = AgoraRTC.createClient({\n  mode: 'live',\n  codec: 'vp8'\n})\n\nconst noop = () => {};\n\ninterface MediaDeviceInfo {\n  label: string;\n  deviceId: string;\n}\n\nconst useCamera = (client = fakeClient): MediaDeviceInfo[] => {\n  const [cameraList, setCameraList] = useState<MediaDeviceInfo[]>([]);\n\n  useEffect(() => {\n    let mounted = true;\n\n    const onChange = () => {\n      if (!client) {\n        return;\n      }\n      client\n        .getCameras()\n        .then((cameras: MediaDeviceInfo[]) => {\n          if (mounted) {\n            setCameraList(cameras);\n          }\n        })\n        .catch(noop);\n    };\n    \n    client && client.on('camera-changed', onChange);\n    \n    onChange();\n\n    return () => {\n      mounted = false;\n      client && (client as IClientWithPromise & {gatewayClient: any}).gatewayClient.removeEventListener('cameraChanged', onChange);\n    };\n  }, [client]);\n\n  return cameraList;\n};\n\nexport default useCamera;\n"]},"metadata":{},"sourceType":"module"}