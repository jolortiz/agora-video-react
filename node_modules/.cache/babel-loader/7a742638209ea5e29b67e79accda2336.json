{"ast":null,"code":"import _slicedToArray from \"/Users/jonathanortiz/AgoraIO/Basic-Video-Call/One-to-One-Video/Agora-Web-Tutorial-1to1-React/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport AgoraRTC from '../utils/AgoraEnhancer';\nconst fakeClient = AgoraRTC.createClient({\n  mode: 'live',\n  codec: 'vp8'\n});\n\nconst noop = () => {};\n\nconst useMicrophone = (client = fakeClient) => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        microphoneList = _useState2[0],\n        setMicrophoneList = _useState2[1];\n\n  useEffect(() => {\n    let mounted = true;\n\n    const onChange = () => {\n      if (!client) {\n        return;\n      }\n\n      client.getRecordingDevices().then(microphones => {\n        if (mounted) {\n          setMicrophoneList(microphones);\n        }\n      }).catch(noop);\n    };\n\n    client && client.on('recording-device-changed', onChange);\n    onChange();\n    return () => {\n      mounted = false;\n      client && client.gatewayClient.removeEventListener('recordingDeviceChanged', onChange);\n    };\n  }, [client]);\n  return microphoneList;\n};\n\nexport default useMicrophone;","map":{"version":3,"sources":["/Users/jonathanortiz/AgoraIO/Basic-Video-Call/One-to-One-Video/Agora-Web-Tutorial-1to1-React/src/hooks/useMicrophone.ts"],"names":["useState","useEffect","AgoraRTC","fakeClient","createClient","mode","codec","noop","useMicrophone","client","microphoneList","setMicrophoneList","mounted","onChange","getRecordingDevices","then","microphones","catch","on","gatewayClient","removeEventListener"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AAGA,MAAMC,UAAU,GAAGD,QAAQ,CAACE,YAAT,CAAsB;AACvCC,EAAAA,IAAI,EAAE,MADiC;AAEvCC,EAAAA,KAAK,EAAE;AAFgC,CAAtB,CAAnB;;AAKA,MAAMC,IAAI,GAAG,MAAM,CAAE,CAArB;;AAOA,MAAMC,aAAa,GAAG,CAACC,MAAM,GAAGN,UAAV,KAA4C;AAAA,oBACpBH,QAAQ,CAAoB,EAApB,CADY;AAAA;AAAA,QACzDU,cADyD;AAAA,QACzCC,iBADyC;;AAGhEV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,OAAO,GAAG,IAAd;;AAEA,UAAMC,QAAQ,GAAG,MAAM;AACrB,UAAI,CAACJ,MAAL,EAAa;AACX;AACD;;AACDA,MAAAA,MAAM,CACHK,mBADH,GAEGC,IAFH,CAESC,WAAD,IAAoC;AACxC,YAAIJ,OAAJ,EAAa;AACXD,UAAAA,iBAAiB,CAACK,WAAD,CAAjB;AACD;AACF,OANH,EAOGC,KAPH,CAOSV,IAPT;AAQD,KAZD;;AAcAE,IAAAA,MAAM,IAAIA,MAAM,CAACS,EAAP,CAAU,0BAAV,EAAsCL,QAAtC,CAAV;AACAA,IAAAA,QAAQ;AAER,WAAO,MAAM;AACXD,MAAAA,OAAO,GAAG,KAAV;AACAH,MAAAA,MAAM,IAAKA,MAAD,CAAsDU,aAAtD,CAAoEC,mBAApE,CACR,wBADQ,EAERP,QAFQ,CAAV;AAID,KAND;AAOD,GA3BQ,EA2BN,CAACJ,MAAD,CA3BM,CAAT;AA6BA,SAAOC,cAAP;AACD,CAjCD;;AAmCA,eAAeF,aAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport AgoraRTC from '../utils/AgoraEnhancer';\nimport { IClientWithPromise } from 'agoran-awe/types/promisify';\n\nconst fakeClient = AgoraRTC.createClient({\n  mode: 'live',\n  codec: 'vp8'\n})\n\nconst noop = () => {};\n\ninterface MediaDeviceInfo {\n  label: string;\n  deviceId: string;\n}\n\nconst useMicrophone = (client = fakeClient): MediaDeviceInfo[] => {\n  const [microphoneList, setMicrophoneList] = useState<MediaDeviceInfo[]>([]);\n\n  useEffect(() => {\n    let mounted = true;\n\n    const onChange = () => {\n      if (!client) {\n        return\n      }\n      client\n        .getRecordingDevices()\n        .then((microphones: MediaDeviceInfo[]) => {\n          if (mounted) {\n            setMicrophoneList(microphones);\n          }\n        })\n        .catch(noop);\n    };\n\n    client && client.on('recording-device-changed', onChange);\n    onChange();\n\n    return () => {\n      mounted = false;\n      client && (client as IClientWithPromise & {gatewayClient: any}).gatewayClient.removeEventListener(\n        'recordingDeviceChanged',\n        onChange\n      );\n    };\n  }, [client]);\n\n  return microphoneList;\n};\n\nexport default useMicrophone;\n"]},"metadata":{},"sourceType":"module"}