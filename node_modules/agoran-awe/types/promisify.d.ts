/// <reference types="agora-rtc-sdk" />
import { Enhancer } from './type';
/** ==== promisify client ==== */
export declare const promisifyClient: Enhancer;
export declare const promisifyStream: Enhancer;
export interface IClientWithPromise extends AgoraRTC.Client {
    init: (appId: string) => Promise<void>;
    join: (token: null | string, channel: string, uid: string | number | null) => Promise<string>;
    leave: () => Promise<void>;
    publish: (stream: AgoraRTC.Stream) => Promise<void>;
    subscribe: (stream: AgoraRTC.Stream, options: {
        video: boolean;
        audio: boolean;
    }) => Promise<void>;
    unpublish: (stream: AgoraRTC.Stream) => Promise<void>;
    unsubscribe: (stream: AgoraRTC.Stream) => Promise<void>;
    enableDualStream: () => Promise<void>;
    getCameras: () => Promise<MediaDeviceInfo[]>;
    getLocalAudioStats: () => Promise<AgoraRTC.LocalAudioStatsMap>;
    getLocalVideoStats: () => Promise<AgoraRTC.LocalVideoStatsMap>;
    getNetworkStats: () => Promise<AgoraRTC.NetworkStats>;
    getPlayoutDevices: () => Promise<MediaDeviceInfo[]>;
    getRecordingDevices: () => Promise<MediaDeviceInfo[]>;
    getRemoteAudioStats: () => Promise<AgoraRTC.RemoteAudioStatsMap>;
    getRemoteVideoStats: () => Promise<AgoraRTC.RemoteVideoStatsMap>;
    getSystemStats: () => Promise<AgoraRTC.SystemStats>;
    getTransportStats: () => Promise<AgoraRTC.TransportStats>;
}
export interface IStreamWithPromise extends AgoraRTC.Stream {
    init: () => Promise<void>;
    getStats: () => Promise<AgoraRTC.LocalStreamStats | AgoraRTC.RemoteStreamStats>;
}
